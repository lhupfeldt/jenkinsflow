<?xml version='1.0' encoding='UTF-8'?>
<?py param_names = [param[0] for param in params] ?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>{==num_builds_to_keep==}</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <?py if params: ?>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <?py seen = set() ?>
        <?py for param in params: ?>
        <?py     if param[0] in seen: ?>
        <?py         raise Exception("Respecified param: " + param[0]) ?>
        <?py         #endif ?>
        <?py     seen.add(param[0]) ?>
        <?py     if isinstance(param[1], (str, int)): ?>
        <?py         # assume string param ?>
        <?py         if 'passw' in param[0].lower(): ?>
        <hudson.model.PasswordParameterDefinition>
          <name>{==param[0]==}</name>
          <description>{==param[2]==}</description>
          <defaultValue>{==str(param[1])==}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <?py         else: ?>
        <hudson.model.StringParameterDefinition>
          <name>{==param[0]==}</name>
          <description>{==param[2]==}</description>
          <defaultValue>{==str(param[1])==}</defaultValue>
        </hudson.model.StringParameterDefinition>
        <?py         #endif ?>
        <?py     elif isinstance(param[1], bool): ?>
        <hudson.model.BooleanParameterDefinition>
          <name>{==param[0]==}</name>
          <description>{==param[2]==}</description>
          <defaultValue>{==str(param[1]).lower()==}</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <?py     else: ?>
        <?py         # assume choice param ?>
        <hudson.model.ChoiceParameterDefinition>
          <name>{==param[0]==}</name>
          <description>{==param[2]==}</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <?py for choice in param[1]: ?>
              <string>{==choice==}</string>
              <?py #endfor ?>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <?py     #endif ?>
        <?py #endfor ?>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <?py #endif ?>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>{==securitytoken==}</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
<?py if create_job is not None: ?>
  <?py assert create_job.flow_created ?>
    <hudson.tasks.Shell>
      <?py import sys ?>
      <command>#!{==sys.executable==} -B
import sys
sys.path.append("{==test_tmp_dir==}")
from jenkinsflow.jobload import update_job_from_template
from jenkinsflow.test.cfg import ApiType

<?py sys.path.append(test_tmp_dir) ?>

<?py from jenkinsflow.test.cfg import ApiType ?>
<?py if api_type == ApiType.JENKINS: ?>
from jenkinsflow import jenkins_api as jenkins
<?py else: ?>
<?py raise Exception("Unknown/Unsupported api_type: " + api_type) ?>
<?py #endif ?>

<?py if create_job.create_job: ?>
<?py cj = create_job.create_job ?>
<?py fr = 'SUCCESS' if cj.final_result is None else cj.final_result.name ?>
from jenkinsflow.test.framework.mock_api import MockJob
mock_job = MockJob(
    name="{==cj.name==}", exec_time={==cj.exec_time==}, max_fails={==cj.max_fails==},
    expect_invocations={==cj.expect_invocations==}, expect_order={==cj.expect_order==},
    initial_buildno=None, invocation_delay={==cj.invocation_delay==}, unknown_result={==cj.unknown_result==},
    final_result="{==fr==}", serial={==cj.serial==}, params=(), flow_created={==cj.flow_created==}, create_job=None, disappearing=False,
    non_existing=False, kill=False, allow_running=False, api=None,
    final_result_use_cli=False, set_build_descriptions=())
<?py else: ?>
mock_job = None
<?py #endif ?>

config_xml_template = "{==test_tmp_dir==}/jenkinsflow/test/framework/job.xml.tenjin"
context = dict(
    exec_time={==create_job.exec_time==},
    max_fails={==create_job.max_fails==},
    expect_invocations={==create_job.expect_invocations==},
    expect_order={==create_job.expect_order==},
    params=(),
    script=None,
    flow_created={==create_job.flow_created==},
    create_job=mock_job,
    securitytoken="{==securitytoken==}",
    test_tmp_dir="{==test_tmp_dir==}",
    api_type={==api_type==},
    direct_url="{==direct_url==}",
    username="{==username==}",
    password="{==password==}",
    num_builds_to_keep=4,
    set_build_descriptions=(),
)

job_loader_jenkins = jenkins.Jenkins(direct_uri="{==direct_url==}", job_prefix_filter=None, username="{==username==}", password="{==password==}")
update_job_from_template(job_loader_jenkins, "{==create_job.name==}", config_xml_template, context=context)
      </command>
      <unstableReturn>77</unstableReturn>
    </hudson.tasks.Shell>
<?py #endif ?>
<?py if set_build_descriptions: ?>
    <?py import sys ?>
    <hudson.tasks.Shell>
      <command>#!{==sys.executable==} -B
import sys
import time

sys.path.append("{==test_tmp_dir==}")

from jenkinsflow.utils.set_build_description import set_build_description

<?py for description, replace, separator in set_build_descriptions: ?>
# TODO: set build description rest api is timing sensitive
time.sleep(1)
set_build_description("{==description==}", {==replace==}, "{==separator==}", username="{==username==}", password="{==password==}")
<?py #endfor ?>

      </command>
      <unstableReturn>77</unstableReturn>
    </hudson.tasks.Shell>
<?py else: ?>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set -u
date --rfc-3339=ns
<?py if script is not None: ?>
{==script==}
<?py else: ?>
date
echo sleeping={==exec_time==}
sleep {==exec_time==}
date
<?py #endif ?>
<?py if 'force_result' in param_names: ?>
case $force_result in
   SUCCESS) exit 0;;
   FAILURE) exit 1;;
   UNSTABLE) exit 77;;  # Job must be configured to use 77 as exit code for unstable
   ABORTED)
       echo "Got force_result arg '$force_result' but the job ran to the end without being aborted!";
       exit 1;;
   *)
       echo "Got unknown force_result arg '$force_result'!";
       exit 1;;
esac
<?py #endif ?>
      </command>
      <unstableReturn>77</unstableReturn>
    </hudson.tasks.Shell>
<?py #endif ?>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
